[
    {
        "comment": "/**\n * a collection of one or more elements (nodes and edges)\n * @typedef {object} eles\n */",
        "description": "a collection of one or more elements (nodes and edges)",
        "kind": "typedef",
        "name": "eles",
        "type": {
            "names": [
                "object"
            ]
        },
        "longname": "eles",
        "scope": "global"
    },
    {
        "comment": "/**\n * a collection of a single element (node or edge)\n * @typedef {object} ele\n */",
        "description": "a collection of a single element (node or edge)",
        "kind": "typedef",
        "name": "ele",
        "type": {
            "names": [
                "object"
            ]
        },
        "longname": "ele",
        "scope": "global"
    },
    {
        "comment": "/**\n * a collection of one or more nodes\n * @typedef {object} nodes\n */",
        "description": "a collection of one or more nodes",
        "kind": "typedef",
        "name": "nodes",
        "type": {
            "names": [
                "object"
            ]
        },
        "longname": "nodes",
        "scope": "global"
    },
    {
        "comment": "/**\n * a collection of one or more nodes\n * @typedef {boolean} selector\n */",
        "description": "a collection of one or more nodes",
        "kind": "typedef",
        "name": "selector",
        "type": {
            "names": [
                "boolean"
            ]
        },
        "longname": "selector",
        "scope": "global"
    },
    {
        "comment": "/**\n * a collection of a single node\n * @typedef {object} node\t\n */",
        "description": "a collection of a single node",
        "kind": "typedef",
        "name": "node",
        "type": {
            "names": [
                "object"
            ]
        },
        "longname": "node",
        "scope": "global"
    },
    {
        "comment": "/**\n * a collection of one or more edges\n * @typedef {object} edges\n */",
        "description": "a collection of one or more edges",
        "kind": "typedef",
        "name": "edges",
        "type": {
            "names": [
                "object"
            ]
        },
        "longname": "edges",
        "scope": "global"
    },
    {
        "comment": "/**\n * a collection of a single edge\n * @typedef {object} edge\n */",
        "description": "a collection of a single edge",
        "kind": "typedef",
        "name": "edge",
        "type": {
            "names": [
                "object"
            ]
        },
        "longname": "edge",
        "scope": "global"
    },
    {
        "comment": "/**\n * a layout\n * @typedef {object} layout\n */",
        "description": "a layout",
        "kind": "typedef",
        "name": "layout",
        "type": {
            "names": [
                "object"
            ]
        },
        "longname": "layout",
        "scope": "global"
    },
    {
        "comment": "/**\n * an animation\n * @typedef {object} ani\n */",
        "description": "an animation",
        "kind": "typedef",
        "name": "ani",
        "type": {
            "names": [
                "object"
            ]
        },
        "longname": "ani",
        "scope": "global"
    },
    {
        "comment": "/**\n * @namespace cy\n */",
        "meta": {
            "filename": "index.js",
            "lineno": 51,
            "columnno": 0,
            "path": "/home/rahul/Documents/GSOD/jsdoc_prototype/src",
            "code": {}
        },
        "kind": "namespace",
        "name": "cy",
        "longname": "cy",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                740,
                780
            ],
            "filename": "index.js",
            "lineno": 55,
            "columnno": 2,
            "path": "/home/rahul/Documents/GSOD/jsdoc_prototype/src",
            "code": {
                "id": "astnode100000014",
                "name": "container",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "container",
        "longname": "container",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n * Add elements to the graph and return them\n * @memberof cy\n * @param { ele | eles } x - A plain object that specifies the element or A collection of elements.\n * @namespace cy.add\n */",
        "description": "Add elements to the graph and return them",
        "memberof": "cy",
        "params": [
            {
                "name": "cy.filter",
                "descr": "Get elements in the graph matching the specified selector.",
                "args": [
                    {
                        "name": "selector",
                        "descr": "The selector the elements should match."
                    }
                ]
            },
            {
                "name": "cy.filter",
                "descr": "Get elements in the graph matching the specified filter function.",
                "args": [
                    {
                        "name": "function(ele,i,eles)",
                        "fields": [
                            {
                                "name": "ele",
                                "descr": "The current element under consideration for filtering."
                            },
                            {
                                "name": "i",
                                "descr": "The counter used for iteration over the elements in the graph."
                            },
                            {
                                "name": "eles",
                                "descr": "The collection of elements being filtered"
                            }
                        ],
                        "descr": "The filter function that returns true for elements that should be returned."
                    }
                ]
            }
        ],
        "kind": "namespace",
        "name": "add",
        "longname": "cy.add",
        "scope": "static"
    },
    {
        "comment": "/**\n * Remove elements from the graph and return them.\n * @memberof cy\n * @param { eles | selector } x - A plain object that specifies the element or A collection of elements.\n * @namespace cy.remove\n */",
        "meta": {
            "filename": "index.js",
            "lineno": 68,
            "columnno": 2,
            "path": "/home/rahul/Documents/GSOD/jsdoc_prototype/src",
            "code": {}
        },
        "description": "Remove elements from the graph and return them.",
        "memberof": "cy",
        "params": [
            {
                "type": {
                    "names": [
                        "eles",
                        "selector"
                    ]
                },
                "description": "A plain object that specifies the element or A collection of elements.",
                "name": "x"
            }
        ],
        "kind": "namespace",
        "name": "remove",
        "longname": "cy.remove",
        "scope": "static"
    },
    {
        "comment": "/**\n * Return a new, empty collection.\n * @memberof cy \n * @namespace cy.collection\n */",
        "meta": {
            "filename": "index.js",
            "lineno": 78,
            "columnno": 2,
            "path": "/home/rahul/Documents/GSOD/jsdoc_prototype/src",
            "code": {}
        },
        "description": "Return a new, empty collection.",
        "memberof": "cy",
        "kind": "namespace",
        "name": "collection",
        "longname": "cy.collection",
        "scope": "static"
    },
    {
        "comment": "/**\n * Get an element from its ID in a very performant way\n * @memberof cy\n * @alias cy.$id\n * @param { ele } x - The ID of the element to get. \n * @namespace cy.getElementById\n */",
        "meta": {
            "filename": "index.js",
            "lineno": 87,
            "columnno": 2,
            "path": "/home/rahul/Documents/GSOD/jsdoc_prototype/src",
            "code": {}
        },
        "description": "Get an element from its ID in a very performant way",
        "memberof": "cy",
        "alias": "cy.$id",
        "params": [
            {
                "type": {
                    "names": [
                        "ele"
                    ]
                },
                "description": "The ID of the element to get.",
                "name": "x"
            }
        ],
        "kind": "namespace",
        "name": "getElementById",
        "longname": "cy.getElementById",
        "scope": "static"
    },
    {
        "comment": "/**\n * Get an element from its ID in a very performant way\n * @memberof cy\n * @param {function():any} callback - A callback within which you can make batch updates to elements.\n * @namespace cy.batch\n */",
        "meta": {
            "filename": "index.js",
            "lineno": 98,
            "columnno": 2,
            "path": "/home/rahul/Documents/GSOD/jsdoc_prototype/src",
            "code": {}
        },
        "description": "Get an element from its ID in a very performant way",
        "memberof": "cy",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A callback within which you can make batch updates to elements.",
                "name": "callback"
            }
        ],
        "kind": "namespace",
        "name": "batch",
        "longname": "cy.batch",
        "scope": "static"
    },
    {
        "comment": "/**\n * Attaches the instance to the specified container for visualisation.\n * @memberof cy\n * @param { object } container - A HTML DOM element in which the graph should be rendered.\n * @namespace cy.mount\n */",
        "meta": {
            "filename": "index.js",
            "lineno": 108,
            "columnno": 2,
            "path": "/home/rahul/Documents/GSOD/jsdoc_prototype/src",
            "code": {}
        },
        "description": "Attaches the instance to the specified container for visualisation.",
        "memberof": "cy",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "A HTML DOM element in which the graph should be rendered.",
                "name": "container"
            }
        ],
        "kind": "namespace",
        "name": "mount",
        "longname": "cy.mount",
        "scope": "static"
    },
    {
        "kind": "package",
        "longname": "package:undefined",
        "files": [
            "/home/rahul/Documents/GSOD/jsdoc_prototype/src/index.js"
        ]
    }
]