[
    {
        "name": "cy.on",
        "pureAliases": [
            "cy.bind",
            "cy.listen",
            "cy.addListner"
        ],
        "descr": "Listen to events that occur on the core.",
        "formats": [
            {
                "name": "cy.on",
                "descr": "Listen to events that bubble up from elements matching the specified node selector:",
                "args": [
                    {
                        "name": "events",
                        "descr": "A space separated list of event names."
                    },
                    {
                        "name": "selector",
                        "descr": "A selector to specify elements for which the handler runs."
                    },
                    {
                        "name": "function(event)",
                        "fields": [
                            {
                                "name": "event",
                                "descr": "The event object."
                            }
                        ],
                        "descr": "The handler function that is called when one of the specified events occurs."
                    }
                ]
            }
        ]
    },
    {
        "name": "cy.promiseOn",
        "pureAliases": [
            "cy.pon"
        ],
        "formats": [
            {
                "name": "cy.promiseOn",
                "descr": "Get a promise that is resolved when the core emits the first of any of the specified events.",
                "args": [
                    {
                        "name": "events",
                        "descr": "A space separated list of event names."
                    },
                    {
                        "name": "selector",
                        "descr": "A selector to specify elements for which the handler runs."
                    }
                ]
            }
        ]
    },
    {
        "name": "cy.one",
        "formats": [
            {
                "name": "cy.one",
                "descr": "Listen to events that occur on the core, and run the handler only once.",
                "args": [
                    {
                        "name": "events",
                        "descr": "A space separated list of event names."
                    },
                    {
                        "name": "selector",
                        "descr": "A selector to specify elements for which the handler runs."
                    },
                    {
                        "name": "function(event)",
                        "fields": [
                            {
                                "name": "event",
                                "descr": "The event object."
                            }
                        ],
                        "descr": "The handler function that is called when one of the specified events occurs."
                    }
                ]
            }
        ]
    },
    {
        "name": "cy.removeListner",
        "pureAliases": [
            "cy.off",
            "cy.unbind",
            "cy.unlisten"
        ],
        "formats": [
            {
                "name": "cy.removeListner",
                "descr": "Remove event handlers on the core.",
                "args": [
                    {
                        "name": "events",
                        "descr": "A space separated list of event names."
                    },
                    {
                        "name": "selector",
                        "descr": "The same selector used to listen to the events."
                    },
                    {
                        "name": "handler",
                        "descr": "A reference to the handler function to remove."
                    }
                ]
            }
        ]
    },
    {
        "name": "cy.removeAllListner",
        "formats": [
            {
                "name": "cy.removeAllListner",
                "descr": "Remove all event handlers on the core."
            }
        ]
    },
    {
        "name": "cy.removeAllListeners",
        "descr": "Remove all event handlers on the core."
    },
    {
        "name": "cy.emit",
        "pureAliases": [
            "cy.trigger"
        ],
        "formats": [
            {
                "name": "cy.emit",
                "descr": "Emit one or more events.",
                "args": [
                    {
                        "name": "events",
                        "descr": "A list of event names to emit (either a space-separated string or an array)"
                    },
                    {
                        "name": "extraParams",
                        "descr": "An array of additional parameters to pass to the handler."
                    }
                ]
            }
        ]
    },
    {
        "name": "cy.ready",
        "formats": [
            {
                "descr": "Run a callback as soon as the graph becomes ready (i.e. intitial data loaded and initial layout completed).  If the graph is already ready, then the callback is called immediately.  If data is loaded synchronously and the layout used is discrete/synchronous/unanimated/unspecified, then you don't need `cy.ready()`.",
                "args": [
                    {
                        "name": "function(event)",
                        "fields": [
                            {
                                "name": "event",
                                "descr": "The `ready` event."
                            }
                        ],
                        "descr": "The callback run as soon as the graph is ready."
                    }
                ]
            }
        ]
    }
]